// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/db/models/attachment_model.dart';
import 'src/db/models/avatar_model.dart';
import 'src/db/models/conversation_model.dart';
import 'src/db/models/message_model.dart';
import 'src/db/models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6709400528399140612),
      name: 'AttachmentModel',
      lastPropertyId: const obx_int.IdUid(5, 5717160279142175066),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7263863558592423196),
            name: 'bid',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 747399038920962484),
            name: 'fileId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(37, 873959491954871870)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 768953523524252804),
            name: 'fileName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2743437583742703683),
            name: 'fileBlurHash',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5717160279142175066),
            name: 'url',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 5352194789380319428),
      name: 'AvatarModel',
      lastPropertyId: const obx_int.IdUid(5, 7667400744069831045),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7103894213264938615),
            name: 'bid',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5029774360479968412),
            name: 'fileId',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(25, 4244316179033347291)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5415602239263669102),
            name: 'fileName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8603914852688423714),
            name: 'fileBlurHash',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7667400744069831045),
            name: 'imageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 6168919874786736956),
      name: 'MessageModel',
      lastPropertyId: const obx_int.IdUid(9, 1875750503242122079),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 849260663934900342),
            name: 'bid',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3431085295353515294),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(27, 1312181892016791297)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 298933995628152516),
            name: 'from',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2201771245741036678),
            name: 'cid',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6726139322816044811),
            name: 'rawStatus',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6475269319788621443),
            name: 'body',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2472667661907244788),
            name: 't',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1010284661967327878),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1875750503242122079),
            name: 'dbExtension',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 1972630443271039517),
            name: 'attachments',
            targetId: const obx_int.IdUid(8, 6709400528399140612))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 6516061588255621718),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(12, 4610750389367537300),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4596686184514143634),
            name: 'bid',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1796029667524301994),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(28, 8383136850945105628)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3523188585463807346),
            name: 'deviceId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3983606319140370548),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1544825709604943638),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5527472554947430886),
            name: 'recentActivity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 260065750458389466),
            name: 'login',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3300380321564909619),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5969495372761363000),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2323797854769346526),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7157251502045924726),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4610750389367537300),
            name: 'avatarBindId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(24, 2478963062982225581),
            relationTarget: 'AvatarModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 9106374520578572502),
      name: 'ConversationModel',
      lastPropertyId: const obx_int.IdUid(16, 8214829155225431382),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6717232681942624528),
            name: 'bid',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2579398636291900819),
            name: 'id',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(29, 4205296519667695880)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7873950750532297915),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9132499605888996505),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7874076721401934636),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1911538922432355672),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3488711112687952056),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4718072041675418821),
            name: 'unreadMessagesCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8543586135917731916),
            name: 'lastMessageBindId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(30, 5882588671767701244),
            relationTarget: 'MessageModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 8542803209060046040),
            name: 'avatarBindId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(33, 7298741033559918238),
            relationTarget: 'AvatarModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6726414800751664493),
            name: 'opponentBindId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(34, 2014479524742516296),
            relationTarget: 'UserModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5058682722642913901),
            name: 'ownerBindId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(35, 2642777293408708995),
            relationTarget: 'UserModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8834178211781701775),
            name: 'isEncrypted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 8214829155225431382),
            name: 'draftMessageBindId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(38, 1718185030575189588),
            relationTarget: 'MessageModel')
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(5, 7785256265115248397),
            name: 'participants',
            targetId: const obx_int.IdUid(12, 6516061588255621718))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(13, 9106374520578572502),
      lastIndexId: const obx_int.IdUid(38, 1718185030575189588),
      lastRelationId: const obx_int.IdUid(5, 7785256265115248397),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        8221608220756309685,
        3916919191516272112,
        2083168856616622261,
        6918202109537402906,
        5487033076272012390,
        5012849246139480832,
        6012607412223436967,
        2679282245502448550
      ],
      retiredIndexUids: const [
        2308776673764111186,
        7730326273086017154,
        8590772032330868498,
        8137762055088700512,
        7050184320199163165,
        5813459946923529345,
        626623788693270148,
        6221333517652902864
      ],
      retiredPropertyUids: const [
        5244948909752663107,
        642035060693614009,
        3131801735437468855,
        7717702637457311038,
        6444097050439138616,
        2052978247185038202,
        3759082206816062884,
        4171243892512299453,
        7660760250429865946,
        7994521092493067568,
        2753590088175921176,
        6723871787072869107,
        3672367778271562063,
        6917676645652591844,
        103343067583914471,
        1719497191968112232,
        125456544499571799,
        135999312779228694,
        1224887090371269290,
        5677110412226819126,
        3854621785786133919,
        4183038334923145217,
        9205162562036445098,
        4117982081165635192,
        5813755567765050557,
        2598453969112274346,
        9145044455135425987,
        5590802489791299855,
        6438701760314840495,
        4695719793845453187,
        6314488510877905217,
        3271216996689882758,
        6380047012876766535,
        3456785938009755266,
        3633717856401305859,
        4375214362308418179,
        4477377261154987816,
        8748385958730009606,
        6323590858319605034,
        9168000509218833904,
        5364493506422957153,
        522372722417879397,
        6073599319266890692,
        7578632378595450354,
        5942505151512357888,
        8738776819488037,
        7002687406836241592,
        9127660167613834806,
        4073551582715204272,
        4394882411289672412,
        7519794114385237563,
        5781198741257241343,
        7567633610019030123,
        8740075846196374882,
        5800900320973295407,
        8640554254403841953,
        2172023124059614591,
        811411619103627512,
        3267521444689283243,
        2639370258575167313,
        6792097179376439446,
        5710713795623848612,
        4217675935215597774,
        8971578261290097735,
        34888985269025050,
        4376506821871815231,
        3776672104103537937,
        7972368654429353481,
        8633736652726027619,
        7353937754765402079,
        7048963428701517603,
        7514358998250204160,
        3264904124875647524,
        614204034693092275,
        155656363300645816,
        1773146609978416143,
        7768713511998184494,
        2456344090811030546,
        2261589455151034389
      ],
      retiredRelationUids: const [4063380833838902563, 5100230969978387914],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AttachmentModel: obx_int.EntityDefinition<AttachmentModel>(
        model: _entities[0],
        toOneRelations: (AttachmentModel object) => [],
        toManyRelations: (AttachmentModel object) => {},
        getId: (AttachmentModel object) => object.bid,
        setId: (AttachmentModel object, int id) {
          object.bid = id;
        },
        objectToFB: (AttachmentModel object, fb.Builder fbb) {
          final fileIdOffset =
              object.fileId == null ? null : fbb.writeString(object.fileId!);
          final fileNameOffset = object.fileName == null
              ? null
              : fbb.writeString(object.fileName!);
          final fileBlurHashOffset = object.fileBlurHash == null
              ? null
              : fbb.writeString(object.fileBlurHash!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          fbb.startTable(6);
          fbb.addInt64(0, object.bid ?? 0);
          fbb.addOffset(1, fileIdOffset);
          fbb.addOffset(2, fileNameOffset);
          fbb.addOffset(3, fileBlurHashOffset);
          fbb.addOffset(4, urlOffset);
          fbb.finish(fbb.endTable());
          return object.bid ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bidParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final fileIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fileNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fileBlurHashParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = AttachmentModel(
              bid: bidParam,
              fileId: fileIdParam,
              fileName: fileNameParam,
              fileBlurHash: fileBlurHashParam,
              url: urlParam);

          return object;
        }),
    AvatarModel: obx_int.EntityDefinition<AvatarModel>(
        model: _entities[1],
        toOneRelations: (AvatarModel object) => [],
        toManyRelations: (AvatarModel object) => {},
        getId: (AvatarModel object) => object.bid,
        setId: (AvatarModel object, int id) {
          object.bid = id;
        },
        objectToFB: (AvatarModel object, fb.Builder fbb) {
          final fileIdOffset =
              object.fileId == null ? null : fbb.writeString(object.fileId!);
          final fileNameOffset = object.fileName == null
              ? null
              : fbb.writeString(object.fileName!);
          final fileBlurHashOffset = object.fileBlurHash == null
              ? null
              : fbb.writeString(object.fileBlurHash!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          fbb.startTable(6);
          fbb.addInt64(0, object.bid ?? 0);
          fbb.addOffset(1, fileIdOffset);
          fbb.addOffset(2, fileNameOffset);
          fbb.addOffset(3, fileBlurHashOffset);
          fbb.addOffset(4, imageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.bid ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bidParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final fileIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fileNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final fileBlurHashParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = AvatarModel(
              bid: bidParam,
              fileId: fileIdParam,
              fileName: fileNameParam,
              fileBlurHash: fileBlurHashParam,
              imageUrl: imageUrlParam);

          return object;
        }),
    MessageModel: obx_int.EntityDefinition<MessageModel>(
        model: _entities[2],
        toOneRelations: (MessageModel object) => [],
        toManyRelations: (MessageModel object) => {
              obx_int.RelInfo<MessageModel>.toMany(2, object.bid!):
                  object.attachments
            },
        getId: (MessageModel object) => object.bid,
        setId: (MessageModel object, int id) {
          object.bid = id;
        },
        objectToFB: (MessageModel object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final fromOffset =
              object.from == null ? null : fbb.writeString(object.from!);
          final cidOffset =
              object.cid == null ? null : fbb.writeString(object.cid!);
          final rawStatusOffset = object.rawStatus == null
              ? null
              : fbb.writeString(object.rawStatus!);
          final bodyOffset =
              object.body == null ? null : fbb.writeString(object.body!);
          final dbExtensionOffset = object.dbExtension == null
              ? null
              : fbb.writeString(object.dbExtension!);
          fbb.startTable(10);
          fbb.addInt64(0, object.bid ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, fromOffset);
          fbb.addOffset(3, cidOffset);
          fbb.addOffset(4, rawStatusOffset);
          fbb.addOffset(5, bodyOffset);
          fbb.addInt64(6, object.t);
          fbb.addInt64(7, object.createdAt?.millisecondsSinceEpoch);
          fbb.addOffset(8, dbExtensionOffset);
          fbb.finish(fbb.endTable());
          return object.bid ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final bidParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fromParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final cidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final rawStatusParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final bodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final tParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = MessageModel(
              bid: bidParam,
              id: idParam,
              from: fromParam,
              cid: cidParam,
              rawStatus: rawStatusParam,
              body: bodyParam,
              createdAt: createdAtParam,
              t: tParam)
            ..dbExtension = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20);
          obx_int.InternalToManyAccess.setRelInfo<MessageModel>(
              object.attachments,
              store,
              obx_int.RelInfo<MessageModel>.toMany(2, object.bid!));
          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[3],
        toOneRelations: (UserModel object) => [object.avatarBind],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.bid,
        setId: (UserModel object, int id) {
          object.bid = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final deviceIdOffset = object.deviceId == null
              ? null
              : fbb.writeString(object.deviceId!);
          final loginOffset =
              object.login == null ? null : fbb.writeString(object.login!);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          fbb.startTable(13);
          fbb.addInt64(0, object.bid ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, deviceIdOffset);
          fbb.addInt64(3, object.createdAt?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.recentActivity);
          fbb.addOffset(6, loginOffset);
          fbb.addOffset(7, firstNameOffset);
          fbb.addOffset(8, lastNameOffset);
          fbb.addOffset(9, phoneOffset);
          fbb.addOffset(10, emailOffset);
          fbb.addInt64(11, object.avatarBind.targetId);
          fbb.finish(fbb.endTable());
          return object.bid ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final bidParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final deviceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final createdAtParam = createdAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          final updatedAtParam = updatedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          final recentActivityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final loginParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final object = UserModel(
              bid: bidParam,
              id: idParam,
              deviceId: deviceIdParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              recentActivity: recentActivityParam,
              login: loginParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              phone: phoneParam,
              email: emailParam);
          object.avatarBind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.avatarBind.attach(store);
          return object;
        }),
    ConversationModel: obx_int.EntityDefinition<ConversationModel>(
        model: _entities[4],
        toOneRelations: (ConversationModel object) => [
              object.lastMessageBind,
              object.avatarBind,
              object.opponentBind,
              object.ownerBind,
              object.draftMessageBind
            ],
        toManyRelations: (ConversationModel object) => {
              obx_int.RelInfo<ConversationModel>.toMany(5, object.bid!):
                  object.participants
            },
        getId: (ConversationModel object) => object.bid,
        setId: (ConversationModel object, int id) {
          object.bid = id;
        },
        objectToFB: (ConversationModel object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final typeOffset = fbb.writeString(object.type);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(17);
          fbb.addInt64(0, object.bid ?? 0);
          fbb.addOffset(1, idOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(4, typeOffset);
          fbb.addOffset(5, nameOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.addInt64(7, object.unreadMessagesCount);
          fbb.addInt64(8, object.lastMessageBind.targetId);
          fbb.addInt64(11, object.avatarBind.targetId);
          fbb.addInt64(12, object.opponentBind.targetId);
          fbb.addInt64(13, object.ownerBind.targetId);
          fbb.addBool(14, object.isEncrypted);
          fbb.addInt64(15, object.draftMessageBind.targetId);
          fbb.finish(fbb.endTable());
          return object.bid ?? 0;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final bidParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final unreadMessagesCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final isEncryptedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 32);
          final object = ConversationModel(
              bid: bidParam,
              id: idParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              name: nameParam,
              type: typeParam,
              unreadMessagesCount: unreadMessagesCountParam,
              description: descriptionParam,
              isEncrypted: isEncryptedParam);
          object.lastMessageBind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.lastMessageBind.attach(store);
          object.avatarBind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.avatarBind.attach(store);
          object.opponentBind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.opponentBind.attach(store);
          object.ownerBind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.ownerBind.attach(store);
          object.draftMessageBind.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.draftMessageBind.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<ConversationModel>(
              object.participants,
              store,
              obx_int.RelInfo<ConversationModel>.toMany(5, object.bid!));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AttachmentModel] entity fields to define ObjectBox queries.
class AttachmentModel_ {
  /// See [AttachmentModel.bid].
  static final bid =
      obx.QueryIntegerProperty<AttachmentModel>(_entities[0].properties[0]);

  /// See [AttachmentModel.fileId].
  static final fileId =
      obx.QueryStringProperty<AttachmentModel>(_entities[0].properties[1]);

  /// See [AttachmentModel.fileName].
  static final fileName =
      obx.QueryStringProperty<AttachmentModel>(_entities[0].properties[2]);

  /// See [AttachmentModel.fileBlurHash].
  static final fileBlurHash =
      obx.QueryStringProperty<AttachmentModel>(_entities[0].properties[3]);

  /// See [AttachmentModel.url].
  static final url =
      obx.QueryStringProperty<AttachmentModel>(_entities[0].properties[4]);
}

/// [AvatarModel] entity fields to define ObjectBox queries.
class AvatarModel_ {
  /// See [AvatarModel.bid].
  static final bid =
      obx.QueryIntegerProperty<AvatarModel>(_entities[1].properties[0]);

  /// See [AvatarModel.fileId].
  static final fileId =
      obx.QueryStringProperty<AvatarModel>(_entities[1].properties[1]);

  /// See [AvatarModel.fileName].
  static final fileName =
      obx.QueryStringProperty<AvatarModel>(_entities[1].properties[2]);

  /// See [AvatarModel.fileBlurHash].
  static final fileBlurHash =
      obx.QueryStringProperty<AvatarModel>(_entities[1].properties[3]);

  /// See [AvatarModel.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<AvatarModel>(_entities[1].properties[4]);
}

/// [MessageModel] entity fields to define ObjectBox queries.
class MessageModel_ {
  /// See [MessageModel.bid].
  static final bid =
      obx.QueryIntegerProperty<MessageModel>(_entities[2].properties[0]);

  /// See [MessageModel.id].
  static final id =
      obx.QueryStringProperty<MessageModel>(_entities[2].properties[1]);

  /// See [MessageModel.from].
  static final from =
      obx.QueryStringProperty<MessageModel>(_entities[2].properties[2]);

  /// See [MessageModel.cid].
  static final cid =
      obx.QueryStringProperty<MessageModel>(_entities[2].properties[3]);

  /// See [MessageModel.rawStatus].
  static final rawStatus =
      obx.QueryStringProperty<MessageModel>(_entities[2].properties[4]);

  /// See [MessageModel.body].
  static final body =
      obx.QueryStringProperty<MessageModel>(_entities[2].properties[5]);

  /// See [MessageModel.t].
  static final t =
      obx.QueryIntegerProperty<MessageModel>(_entities[2].properties[6]);

  /// See [MessageModel.createdAt].
  static final createdAt =
      obx.QueryDateProperty<MessageModel>(_entities[2].properties[7]);

  /// See [MessageModel.dbExtension].
  static final dbExtension =
      obx.QueryStringProperty<MessageModel>(_entities[2].properties[8]);

  /// see [MessageModel.attachments]
  static final attachments =
      obx.QueryRelationToMany<MessageModel, AttachmentModel>(
          _entities[2].relations[0]);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.bid].
  static final bid =
      obx.QueryIntegerProperty<UserModel>(_entities[3].properties[0]);

  /// See [UserModel.id].
  static final id =
      obx.QueryStringProperty<UserModel>(_entities[3].properties[1]);

  /// See [UserModel.deviceId].
  static final deviceId =
      obx.QueryStringProperty<UserModel>(_entities[3].properties[2]);

  /// See [UserModel.createdAt].
  static final createdAt =
      obx.QueryDateProperty<UserModel>(_entities[3].properties[3]);

  /// See [UserModel.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<UserModel>(_entities[3].properties[4]);

  /// See [UserModel.recentActivity].
  static final recentActivity =
      obx.QueryIntegerProperty<UserModel>(_entities[3].properties[5]);

  /// See [UserModel.login].
  static final login =
      obx.QueryStringProperty<UserModel>(_entities[3].properties[6]);

  /// See [UserModel.firstName].
  static final firstName =
      obx.QueryStringProperty<UserModel>(_entities[3].properties[7]);

  /// See [UserModel.lastName].
  static final lastName =
      obx.QueryStringProperty<UserModel>(_entities[3].properties[8]);

  /// See [UserModel.phone].
  static final phone =
      obx.QueryStringProperty<UserModel>(_entities[3].properties[9]);

  /// See [UserModel.email].
  static final email =
      obx.QueryStringProperty<UserModel>(_entities[3].properties[10]);

  /// See [UserModel.avatarBind].
  static final avatarBind = obx.QueryRelationToOne<UserModel, AvatarModel>(
      _entities[3].properties[11]);
}

/// [ConversationModel] entity fields to define ObjectBox queries.
class ConversationModel_ {
  /// See [ConversationModel.bid].
  static final bid =
      obx.QueryIntegerProperty<ConversationModel>(_entities[4].properties[0]);

  /// See [ConversationModel.id].
  static final id =
      obx.QueryStringProperty<ConversationModel>(_entities[4].properties[1]);

  /// See [ConversationModel.createdAt].
  static final createdAt =
      obx.QueryDateProperty<ConversationModel>(_entities[4].properties[2]);

  /// See [ConversationModel.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<ConversationModel>(_entities[4].properties[3]);

  /// See [ConversationModel.type].
  static final type =
      obx.QueryStringProperty<ConversationModel>(_entities[4].properties[4]);

  /// See [ConversationModel.name].
  static final name =
      obx.QueryStringProperty<ConversationModel>(_entities[4].properties[5]);

  /// See [ConversationModel.description].
  static final description =
      obx.QueryStringProperty<ConversationModel>(_entities[4].properties[6]);

  /// See [ConversationModel.unreadMessagesCount].
  static final unreadMessagesCount =
      obx.QueryIntegerProperty<ConversationModel>(_entities[4].properties[7]);

  /// See [ConversationModel.lastMessageBind].
  static final lastMessageBind =
      obx.QueryRelationToOne<ConversationModel, MessageModel>(
          _entities[4].properties[8]);

  /// See [ConversationModel.avatarBind].
  static final avatarBind =
      obx.QueryRelationToOne<ConversationModel, AvatarModel>(
          _entities[4].properties[9]);

  /// See [ConversationModel.opponentBind].
  static final opponentBind =
      obx.QueryRelationToOne<ConversationModel, UserModel>(
          _entities[4].properties[10]);

  /// See [ConversationModel.ownerBind].
  static final ownerBind = obx.QueryRelationToOne<ConversationModel, UserModel>(
      _entities[4].properties[11]);

  /// See [ConversationModel.isEncrypted].
  static final isEncrypted =
      obx.QueryBooleanProperty<ConversationModel>(_entities[4].properties[12]);

  /// See [ConversationModel.draftMessageBind].
  static final draftMessageBind =
      obx.QueryRelationToOne<ConversationModel, MessageModel>(
          _entities[4].properties[13]);

  /// see [ConversationModel.participants]
  static final participants =
      obx.QueryRelationToMany<ConversationModel, UserModel>(
          _entities[4].relations[0]);
}
